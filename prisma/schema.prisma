generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model database_table {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  icon       String
  is_hidden  Boolean
  can_create Boolean
  can_update Boolean

  column_relations            column_relation[]       @relation("fk_cr_table_id")
  columns                     database_table_column[] @relation("fk_dbtc_table_id")
  referenced_column_relations column_relation[]       @relation("fk_cr_referenced_table_id")
  pivoted_column_relations    column_relation[]       @relation("fk_cr_pivot_table_id")
}

model database_table_column {
  id                    Int     @id @default(autoincrement())
  name                  String
  table_id              Int
  type_id               Int
  is_primary            Boolean
  is_required           Boolean
  is_unique             Boolean
  is_hidden             Boolean
  is_filterable         Boolean
  is_searchable         Boolean
  is_sortable           Boolean
  input_type_id         Int
  create_crud_option_id Int?
  update_crud_option_id Int?
  read_crud_option_id   Int?

  database_table     database_table? @relation("fk_dbtc_table_id", fields: [table_id], references: [id])
  input_type         data_type?      @relation("fk_dbtc_input_type_id", fields: [input_type_id], references: [id])
  type               data_type?      @relation("fk_dbtc_type_id", fields: [type_id], references: [id])
  create_crud_option crud_option?    @relation("fk_dbtc_create_crud_option_id", fields: [create_crud_option_id], references: [id])
  update_crud_option crud_option?    @relation("fk_dbtc_update_crud_option_id", fields: [update_crud_option_id], references: [id])
  read_crud_option   crud_option?    @relation("fk_dbtc_read_crud_option_id", fields: [read_crud_option_id], references: [id])

  column_relations            column_relation[] @relation("fk_cr_column_id")
  options                     column_option[]   @relation("fk_coo_column_id")
  referenced_column_relations column_relation[] @relation("fk_cr_referenced_column_id")
}

model crud_option {
  id            Int     @id @default(autoincrement())
  name          String
  is_hidden     Boolean
  is_required   Boolean
  is_readonly   Boolean
  input_type_id Int

  InputType           data_type?              @relation("fk_co_input_type_id", fields: [input_type_id], references: [id], map: "fk_co_input_type_id")
  create_crud_options database_table_column[] @relation("fk_dbtc_create_crud_option_id")
  update_crud_options database_table_column[] @relation("fk_dbtc_update_crud_option_id")
  read_crud_options   database_table_column[] @relation("fk_dbtc_read_crud_option_id")
}

model data_type {
  id               Int    @id @default(autoincrement())
  name             String
  type_category_id Int

  crud_option       crud_option[]           @relation("fk_co_input_type_id")
  column_relation   column_relation[]       @relation("fk_cr_relation_type_id")
  column_type       database_table_column[] @relation("fk_dbtc_type_id")
  column_input_type database_table_column[] @relation("fk_dbtc_input_type_id")
}

model column_relation {
  id                   Int    @id @default(autoincrement())
  table_id             Int
  referenced_table_id  Int
  pivot_table_id       Int?
  column_id            Int
  referenced_column_id Int
  relation_type_id     Int
  foreign_key_name     String

  table             database_table?        @relation("fk_cr_table_id", fields: [table_id], references: [id])
  referenced_table  database_table?        @relation("fk_cr_referenced_table_id", fields: [referenced_table_id], references: [id])
  pivot_table       database_table?        @relation("fk_cr_pivot_table_id", fields: [pivot_table_id], references: [id])
  column            database_table_column? @relation("fk_cr_column_id", fields: [column_id], references: [id])
  referenced_column database_table_column? @relation("fk_cr_referenced_column_id", fields: [referenced_column_id], references: [id])
  relation_type     data_type?             @relation("fk_cr_relation_type_id", fields: [relation_type_id], references: [id])
}

model column_option {
  id        Int     @id @default(autoincrement())
  label     String
  value     String
  icon      String?
  column_id Int

  Column database_table_column? @relation("fk_coo_column_id", fields: [column_id], references: [id], map: "fk_coo_column_id")
}

model types {
  id         Int    @id @default(autoincrement())
  name       String
  table_name String

  block     block[]     @relation("fk_block_type_id") //one to many
  component component[] @relation("fk_component_type_id") //one to many
  prop      prop[]      @relation("fk_prop_type_id") //one to many
}

model tag {
  id   Int    @id @default(autoincrement())
  name String

  component component[] @relation("fk_component_tag_id") //one to many
}

model block {
  id      Int    @id @default(autoincrement())
  title   String
  type_id Int

  types types? @relation("fk_block_type_id", fields: [type_id], references: [id]) //many to one

  block_component block_component[] @relation("fk_bcomp_table_id") //one to many
}

model block_component {
  id                  Int     @id @default(autoincrement())
  component_id        Int
  block_id            Int
  belong_component_id Int?
  depth               Int
  order               Int
  code                String?
  hasChildren         Boolean @default(false)

  component        component? @relation("fk_bcomp_component_id", fields: [component_id], references: [id]) //many to one
  block            block?     @relation("fk_bcomp_table_id", fields: [block_id], references: [id]) //many to one
  belong_component component? @relation("fk_bcomp_belong_component_id", fields: [belong_component_id], references: [id]) //many to one

  block_component_prop block_component_prop[] @relation("fk_bcomp_block_component_id") //one to many
}

model block_component_prop {
  id                 Int    @id @default(autoincrement())
  prop_id            Int
  block_component_id Int
  value              String

  prop            prop?            @relation("fk_bcomp_prop_id", fields: [prop_id], references: [id]) //many to one
  block_component block_component? @relation("fk_bcomp_block_component_id", fields: [block_component_id], references: [id]) //many to one
}

model component {
  id      Int     @id @default(autoincrement())
  name    String
  tag_id  Int
  type_id Int
  icon    String?

  tag   tag?   @relation("fk_component_tag_id", fields: [tag_id], references: [id]) //many to one
  types types? @relation("fk_component_type_id", fields: [type_id], references: [id]) //many to one

  block_component       block_component[] @relation("fk_bcomp_component_id") //one to many
  block_componentBelong block_component[] @relation("fk_bcomp_belong_component_id") //one to many
  component_prop        component_prop[]  @relation("fk_comp_component_id") //one to many
}

model component_prop {
  id           Int @id @default(autoincrement())
  component_id Int
  prop_id      Int

  component component? @relation("fk_comp_component_id", fields: [component_id], references: [id]) //many to one
  prop      prop?      @relation("fk_comp_prop_id", fields: [prop_id], references: [id]) //many to one
}

model prop {
  id      Int    @id @default(autoincrement())
  key     String
  type_id Int

  types types? @relation("fk_prop_type_id", fields: [type_id], references: [id]) //many to one

  block_component_prop block_component_prop[] @relation("fk_bcomp_prop_id") //one to many
  component_prop       component_prop[]       @relation("fk_comp_prop_id") //one to many
}
