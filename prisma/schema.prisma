generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model database_table {
  id                Int                    @id @default(autoincrement())
  name              String                 @unique(map: "ui_name")
  icon              String?
  is_hidden         Boolean?               @default(false)
  can_create        Boolean?               @default(false)
  can_update        Boolean?               @default(false)
  can_delete        Boolean?               @default(false)
  can_translate     Boolean?               @default(false)
  display_column_id Int?
  order             Int?                   @default(0)
  display_column    database_table_column? @relation("fk_dt_display_column_id", fields: [display_column_id], references: [id], map: "fk_dt_display_column_id", onDelete: Cascade, onUpdate: Cascade)

  type                        type[]                  @relation("fk_type_table_id")
  column_relations            column_relation[]       @relation("fk_cr_table_id")
  columns                     database_table_column[] @relation("fk_dbtc_table_id")
  referenced_column_relations column_relation[]       @relation("fk_cr_referenced_table_id")
  pivoted_column_relations    column_relation[]       @relation("fk_cr_pivot_table_id")
  api_routes                  api_route[]             @relation("fk_ar_table_id")
  data_language               data_language[]

  @@map("database_table")
}

model database_table_column {
  id                    Int      @id @default(autoincrement())
  name                  String
  description           String?  @db.Text
  table_id              Int
  is_primary            Boolean? @default(false)
  is_required           Boolean? @default(false)
  is_unique             Boolean? @default(false)
  is_hidden             Boolean? @default(false)
  is_filterable         Boolean? @default(false)
  is_searchable         Boolean? @default(false)
  is_sortable           Boolean? @default(false)
  input_type_id         Int?
  create_crud_option_id Int?
  update_crud_option_id Int?
  read_crud_option_id   Int?
  order                 Int      @default(0)

  database_table     database_table? @relation("fk_dbtc_table_id", fields: [table_id], references: [id], map: "fk_dbtc_table_id", onDelete: Cascade, onUpdate: Cascade)
  input_type         type?           @relation("fk_dbtc_input_type_id", fields: [input_type_id], references: [id], map: "fk_dbtc_input_type_id")
  create_crud_option crud_option?    @relation("fk_dbtc_create_crud_option_id", fields: [create_crud_option_id], references: [id], map: "fk_dbtc_create_crud_option_id")
  update_crud_option crud_option?    @relation("fk_dbtc_update_crud_option_id", fields: [update_crud_option_id], references: [id], map: "fk_dbtc_update_crud_option_id")
  read_crud_option   crud_option?    @relation("fk_dbtc_read_crud_option_id", fields: [read_crud_option_id], references: [id], map: "fk_dbtc_read_crud_option_id")

  column_relations            column_relation[] @relation("fk_cr_column_id")
  options                     column_option[]   @relation("fk_coo_column_id")
  referenced_column_relations column_relation[] @relation("fk_cr_referenced_column_id")
  table_display_column        database_table[]  @relation("fk_dt_display_column_id")
}

model crud_option {
  id            Int     @id @default(autoincrement())
  name          String
  is_hidden     Boolean
  is_required   Boolean
  is_readonly   Boolean
  input_type_id Int

  input_type          type?                   @relation("fk_co_input_type_id", fields: [input_type_id], references: [id], map: "fk_co_input_type_id")
  create_crud_options database_table_column[] @relation("fk_dbtc_create_crud_option_id")
  update_crud_options database_table_column[] @relation("fk_dbtc_update_crud_option_id")
  read_crud_options   database_table_column[] @relation("fk_dbtc_read_crud_option_id")
}

model column_relation {
  id                   Int    @id @default(autoincrement())
  table_id             Int
  referenced_table_id  Int
  pivot_table_id       Int?
  column_id            Int
  referenced_column_id Int
  relation_type_id     Int
  foreign_key_name     String

  table             database_table?        @relation("fk_cr_table_id", fields: [table_id], references: [id], map: "fk_cr_table_id")
  referenced_table  database_table?        @relation("fk_cr_referenced_table_id", fields: [referenced_table_id], references: [id], map: "fk_cr_referenced_table_id")
  pivot_table       database_table?        @relation("fk_cr_pivot_table_id", fields: [pivot_table_id], references: [id], map: "fk_cr_pivot_table_id")
  column            database_table_column? @relation("fk_cr_column_id", fields: [column_id], references: [id], map: "fk_cr_column_id")
  referenced_column database_table_column? @relation("fk_cr_referenced_column_id", fields: [referenced_column_id], references: [id], map: "fk_cr_referenced_column_id")
  relation_type     type?                  @relation("fk_cr_relation_type_id", fields: [relation_type_id], references: [id], map: "fk_cr_relation_type_id")
}

model column_option {
  id        Int     @id @default(autoincrement())
  label     String
  value     String
  icon      String?
  column_id Int

  Column database_table_column? @relation("fk_coo_column_id", fields: [column_id], references: [id], map: "fk_coo_column_id")
}

model type {
  id            Int     @id @default(autoincrement())
  name          String
  table_id      Int?
  language_code String?

  crud_option_input_type crud_option[]           @relation("fk_co_input_type_id")
  column_input_type      database_table_column[] @relation("fk_dbtc_input_type_id")
  column_relation        column_relation[]       @relation("fk_cr_relation_type_id")
  table                  database_table?         @relation("fk_type_table_id", fields: [table_id], references: [id], map: "fk_type_table_id") //many to one
  menu                   menu[]                  @relation("fk_m_type_id") //one to many
  block                  block[]                 @relation("fk_bk_type_id") //one to many
  component              component[]             @relation("fk_comp_type_id") //one to many
  prop                   prop[]                  @relation("fk_prop_type_id") //one to many
  language               language?               @relation("fk_type_language_code", fields: [language_code], references: [code], map: "fk_type_language_code")

  @@unique([table_id, name, language_code], map: "type_table_id_name_language_code_key")
}

model tag {
  id   Int    @id @default(autoincrement())
  name String

  component component[] @relation("fk_comp_tag_id") //one to many

  @@unique([name])
}

model menu {
  id             Int       @id @default(autoincrement())
  title          String
  slug           String
  route          String?   @db.Text
  menu_belong_id Int?
  type_id        Int
  status         Int       @default(0)
  previous_id    Int?
  next_id        Int?
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  menu_belong   menu?  @relation("fk_m_menu_belong_id", fields: [menu_belong_id], references: [id], map: "fk_m_menu_belong_id")
  previous_menu menu?  @relation("fk_m_previous_id", fields: [previous_id], references: [id], map: "fk_m_previous_id")
  next_menu     menu?  @relation("fk_m_next_id", fields: [next_id], references: [id], map: "fk_m_next_id")
  menu_child    menu[] @relation("fk_m_menu_belong_id")
  previous      menu[] @relation("fk_m_previous_id")
  next          menu[] @relation("fk_m_next_id")
  type          type?  @relation("fk_m_type_id", fields: [type_id], references: [id], map: "fk_m_type_id")
}

model general {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?   @db.Text
  slug          String
  image         String?   @db.Text
  href          String?   @db.Text
  button        String?   @db.Text
  language_code String?
  status        Int       @default(0)
  created_at    DateTime  @default(now())
  updated_at    DateTime? @default(now()) @updatedAt

  language language? @relation("fk_general_language_code", fields: [language_code], references: [code], map: "fk_general_language_code")
}

model block {
  id                   Int       @id @default(autoincrement())
  title                String
  type_id              Int
  slug                 String    @default("todo")
  status               Int       @default(0)
  background_image_url String?   @db.Text
  image_url            String?   @db.Text
  created_at           DateTime  @default(now())
  updated_at           DateTime? @updatedAt
  description          String?   @db.Text

  type type? @relation("fk_bk_type_id", fields: [type_id], references: [id], map: "fk_bk_type_id") //many to one

  block_component block_component[] @relation("fk_bcom_table_id") //one to many
}

model block_component {
  id                          Int     @id @default(autoincrement())
  component_id                Int
  block_id                    Int
  belong_block_component_code String?
  depth                       Int
  order                       Int
  code                        String  @unique
  hasChildren                 Boolean @default(false)

  component            component?             @relation("fk_bcom_component_id", fields: [component_id], references: [id], map: "fk_bcom_component_id", onDelete: Cascade) //many to one
  block                block?                 @relation("fk_bcom_table_id", fields: [block_id], references: [id], map: "fk_bcom_table_id", onDelete: Cascade) //many to one
  block_component_prop block_component_prop[] @relation("fk_bcomp_block_component_id") //one to many
}

model block_component_prop {
  id                 Int    @id @default(autoincrement())
  prop_id            Int
  block_component_id Int
  value              String @db.Text

  prop            prop?            @relation("fk_bcomp_prop_id", fields: [prop_id], references: [id], map: "fk_bcomp_prop_id", onDelete: Cascade) //many to one
  block_component block_component? @relation("fk_bcomp_block_component_id", fields: [block_component_id], references: [id], map: "fk_bcomp_block_component_id", onDelete: Cascade) //many to one
}

model component {
  id      Int     @id @default(autoincrement())
  name    String
  tag_id  Int
  type_id Int
  icon    String?

  tag  tag?  @relation("fk_comp_tag_id", fields: [tag_id], references: [id], map: "fk_comp_tag_id") //many to one
  type type? @relation("fk_comp_type_id", fields: [type_id], references: [id], map: "fk_comp_type_id") //many to one

  block_component block_component[] @relation("fk_bcom_component_id") //one to many
  component_prop  component_prop[]  @relation("fk_compp_component_id") //one to many
}

model component_prop {
  id           Int @id @default(autoincrement())
  component_id Int
  prop_id      Int

  component component? @relation("fk_compp_component_id", fields: [component_id], references: [id], map: "fk_compp_component_id", onDelete: Cascade) //many to one
  prop      prop?      @relation("fk_compp_prop_id", fields: [prop_id], references: [id], map: "fk_compp_prop_id", onDelete: Cascade) //many to one
}

model prop {
  id      Int    @id @default(autoincrement())
  key     String
  type_id Int
  type    type?  @relation("fk_prop_type_id", fields: [type_id], references: [id]) //many to one

  block_component_prop block_component_prop[] @relation("fk_bcomp_prop_id") //one to many
  component_prop       component_prop[]       @relation("fk_compp_prop_id") //one to many

  @@unique([key])
}

model translation {
  id              Int    @id @default(autoincrement())
  key             String
  translated_text String
  language_code   String

  language language? @relation("fk_trs_language_code", fields: [language_code], references: [code], map: "fk_trs_language_code")
}

model language {
  id   Int    @id @default(autoincrement())
  name String
  code String

  general       general[]       @relation("fk_general_language_code")
  translations  translation[]   @relation("fk_trs_language_code")
  type          type[]          @relation("fk_type_language_code")
  data_language data_language[]

  @@unique([code])
}

model user {
  id         Int       @id @default(autoincrement())
  first_name String
  last_name  String
  email      String
  password   String
  role_id    Int?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  role role? @relation("fk_u_role_id", fields: [role_id], references: [id], map: "fk_u_role_id")

  @@unique([email])
}

model role {
  id   Int    @id @default(autoincrement())
  name String

  users            user[]            @relation("fk_u_role_id")
  permission_roles permission_role[] @relation("fk_pro_role_id")
}

model log {
  id         Int       @id @default(autoincrement())
  body       String    @db.LongText
  path       String?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model permission {
  id           Int     @id @default(autoincrement())
  api_route_id Int
  is_auth      Boolean @default(false)
  is_role      Boolean @default(false)

  api_route api_route? @relation("fk_pr_api_route_id", fields: [api_route_id], references: [id], map: "fk_pr_api_route_id")

  permission_roles permission_role[] @relation("fk_pro_permission_id")

  @@unique([api_route_id, is_auth, is_role], name: "ui_api_route_auth_role")
}

model api_route {
  id        Int     @id @default(autoincrement())
  path      String
  method    String
  has_param Boolean @default(false)
  table_id  Int?

  table      database_table? @relation("fk_ar_table_id", fields: [table_id], references: [id], map: "fk_ar_table_id")
  permission permission[]    @relation("fk_pr_api_route_id")

  @@unique([path, method], name: "ui_path_method")
}

model permission_role {
  id            Int @id @default(autoincrement())
  permission_id Int
  role_id       Int

  permission permission @relation("fk_pro_permission_id", fields: [permission_id], references: [id], map: "fk_pro_permission_id")
  role       role       @relation("fk_pro_role_id", fields: [role_id], references: [id], map: "fk_pro_role_id")
}

model data_language {
  id                Int             @id @default(autoincrement())
  data_id           Int
  database_table    database_table? @relation(fields: [database_table_id], references: [id])
  database_table_id Int
  language          language        @relation(fields: [language_code], references: [code])
  language_code     String
}

// Conval Specific Models
model reference {
  id        Int    @id @default(autoincrement())
  image_url String
  name      String
}

model client_voice {
  id      Int    @id @default(autoincrement())
  message String
  author  String
}

model partner {
  id        Int    @id @default(autoincrement())
  image_url String
  name      String
}

model contact {
  id        Int    @id @default(autoincrement())
  firstname String
  lastname  String
  phone     String
  email     String
  subject   String
  message   String
  form_slug String
}

model brochure {
  id        Int    @id @default(autoincrement())
  title     String
  image_url String
  pdf_url   String
}

model regulation {
  id        Int    @id @default(autoincrement())
  title     String
  content   String
  image_url String
}

model job {
  id          Int    @id @default(autoincrement())
  title       String
  description String

  cv cv[]
}

model cv {
  id        Int    @id @default(autoincrement())
  jobId     Int?
  email     String
  firstname String
  lastname  String
  cv_url    String
  notes     String

  job job? @relation(fields: [jobId], references: [id])
}
